.\" I hope it works...
\fB\,\m[white]
.TH "RURI" "1" "August 2023" "RURI v2\&.0" "RURI MANUAL"
.SH "NAME"
\fB\,\m[white]ruri \- Lightweight, User\-friendly Linux-container Implementation\&.
.SH "SYNOPSIS"
.sp
.nf
.B ruri OPTIONS
.B ruri [ARGS] CONTAINER_DIRECTORY [INIT_COMMAND]
.fi
.sp
.SH "DESCRIPTION"
.sp
\fB\,ruri is the romaji acronym of Lightweight, User-friendly Linux\-container Implementation\&.
.TP
\fB\,It is designed to provide better security of Linux containers on devices that do not support docker\&.    
.TP
\fB\,PS: ruri is pronounced as \m[cyan]/luli/\m[white], or you can just call it \m[cyan]\`瑠璃\`\m[white] in Chinese or Japanese as well.
.TP
\fB\,See \m[blue]https://github.com/Moe-hacker/ruri\m[white] for source code.
.sp
.SH "OPTIONS"
.PP
  \fB\,-v                    :Show version info
  -V                    :Show version code
  -h                    :Show helps
  -hh                   :Show helps and commandline examples
  -D                    :Run rurid
  -K                    :Kill rurid
  -t                    :Check if rurid is running
  -l                    :List all running unshare containers
  -U [container_dir]    :Umount&kill a container
.SH "ARGUMENTS(FOR RUNNING A CONTAINER)"
.PP
  \fB\,-u                    :Enable unshare feature
  -n                    :Set NO_NEW_PRIVS Flag
  -s                    :Enable Seccomp
  -d                    :Drop more capabilities for lower privilege
  -p                    :Run privileged container
 --keep [cap]           :Keep the specified cap
 --drop [cap]           :Drop the specified cap
  -e [env] [value]      :Set env to its value
  -m [dir] [mountpoint] :Mount dir to mountpoint
  -w                    :Disable warnings
.SH "NOTES"
.TP
\fB\,Unshare container will not enable net and user namespace, I haven't learned how to configure these namespaces\&.
.TP
\fB\,For capabilities and namespaces, see Capabilities(7) and unshare(2)\&.
.TP
\fB\,Environment variables will not work with init command like \`su \-\`, because \`su -\` will reset them.
.TP
\fB\,Init command in unshare container with pid ns support will be the real init for first time running the container, or it will have the same effect with [COMMAND [ARG]...] of chroot(8)\&.
.TP
\fB\,NO_NEW_PRIVS Flag will make commands like sudo unavailable in containers\&.
.TP
\fB\,Seccomp rule is based on docker default seccomp profile\&.
.TP
\fB\,rurid is the daemon of ruri\&. It can store the info of unshare containers and ensure that the same containers run in the same namespaces\&. It's not a necessary process, and pure chroot containers will not communicate with the daemon\&.
.SH "EXAMPLES"
.sp
\fB\,Quickly setup a container(with rootfstool):
.PP
  \fB\,\m[blue]git \m[yellow]clone \m[white]https://github.com/Moe-hacker/rootfstool
  \m[blue]cd \m[white]rootfstool
  \m[blue]\&./rootfstool \m[yellow]download \m[white]\-d alpine \-v edge
  \m[blue]mkdir \m[white]/tmp/alpine
  \m[blue]sudo \m[white]tar \-xvf rootfs.tar.xz \-C /tmp/alpine
.sp
\fB\,Run chroot container:
.PP
  \fB\,\m[blue]sudo \m[white]ruri /tmp/alpine
.sp
\fB\,Very simple as you can see.
.sp
\fB\,Run privileged chroot container:
.PP
  \fB\,\m[blue]sudo \m[white]ruri -p /tmp/alpine
.sp
\fB\,But if you want to make the container more secure:
.PP
  \fB\,\m[blue]sudo \m[white]ruri -d /tmp/alpine
.sp
\fB\,If you want to run privileged chroot container,
\fB\,but you don't want to give the container cap_sys_chroot privileges:
.PP
  \fB\,\m[blue]sudo \m[white]ruri -p --drop cap_sys_chroot /tmp/alpine
.sp
\fB\,If you want to run chroot container with common privileges,
\fB\,but you want cap_sys_admin to be kept:
.PP
  \fB\,\m[blue]sudo \m[white]ruri --keep cap_sys_admin /tmp/alpine
.sp
\fB\,About unshare:
.sp
\fB\,Unshare container's capability options are same with chroot.
.sp
\fB\,But it's recommended to start rurid before running unshare containers:
.PP
  \fB\,\m[blue]sudo \m[white]ruri \-D
.sp
\fB\,Run unshare container:
.PP
  \fB\,\m[blue]sudo \m[white]ruri \-u /tmp/alpine
.sp
\fB\,List running containers:
.PP
  \fB\,\m[blue]sudo \m[white]ruri \-l
.sp
\fB\,Umount the container:
.PP
  \fB\,\m[blue]sudo \m[white]ruri \-U /tmp/alpine
.sp
\fB\,Finally, kill the daemon:
.PP
  \fB\,\m[blue]sudo \m[white]ruri -K
.SH "COPYRIGHT"
\fB\,Copyright \(co 2022-2023 Moe-hacker.
.sp
\fB\,License: MIT <https://mit-license.org>.
.SH "CONTACT"
.sp
\fB\,Author: \m[cyan]Moe Hacker\m[white]
.sp
\fB\,Github: \m[cyan]@Moe-hacker\m[white]
.sp
\fB\,For any bugs, please report at \m[blue]https://github.com/Moe-hacker/ruri/issues\m[white]